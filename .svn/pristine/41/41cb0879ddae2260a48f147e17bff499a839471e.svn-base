package com.strandum.dynaforms.bean;

import java.io.Serializable;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;
import java.util.concurrent.atomic.AtomicInteger;

import javax.annotation.PostConstruct;
import javax.faces.bean.ManagedBean;
import javax.faces.bean.ViewScoped;
import javax.faces.component.UIComponent;
import javax.faces.context.FacesContext;
import javax.faces.event.AjaxBehaviorEvent;

import org.primefaces.extensions.model.dynaform.DynaFormModel;
import org.primefaces.extensions.model.dynaform.DynaFormRow;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.jsf.FacesContextUtils;

import com.strandum.dynaforms.model.Element;
import com.strandum.dynaforms.model.Form;
import com.strandum.dynaforms.model.FormElement;
import com.strandum.dynaforms.prop.FieldProperty;
import com.strandum.dynaforms.service.FormElementService;
import com.strandum.dynaforms.ui.ComponentUtils;
import com.strandum.dynaforms.ui.UIProperty;

@ManagedBean
@ViewScoped
public class FormBean implements Serializable{

	private static final long serialVersionUID = 1L;
	
	private String inputType;

	private DynaFormModel model;
	
	private FieldProperty selectedField;

	private UIComponent oldClickedComponent;
	private UIComponent clickedComponent;
	
	private AtomicInteger count = new AtomicInteger(-1);
	
	private Form form;
	
	private List<FormElement> formElements = new ArrayList<>();
	
	@Autowired
	private FormElementService formElementService;

	private boolean clickedControlHasChanged;

	private List<UIProperty> uiProperties;

	@PostConstruct
	public void initialize() {
		FacesContextUtils
 			.getRequiredWebApplicationContext(FacesContext.getCurrentInstance())
 			.getAutowireCapableBeanFactory().autowireBean(this);
		
		this.setModel(new DynaFormModel());
		this.form = new Form();
	}
	
	public String getInputType() {
		return inputType;
	}

	public void setInputType(String inputType) {
		this.inputType = inputType;
	}

	public DynaFormModel getModel() {
		return model;
	}

	public void setModel(DynaFormModel model) {
		this.model = model;
	}
	
	/**
	 * add Field to the form
	 */
	public void addField() {
		Map<String,String> params = FacesContext.getCurrentInstance().getExternalContext().getRequestParameterMap();
        String compType = params.get("comp-type");
		
		int index = count.incrementAndGet();
		Element element = new Element(compType);
		element.setIndex(index);
		element.setLabel(compType + index);
		
		formElements.add(new FormElement(form, element));
		
		DynaFormRow row = model.createRegularRow();
		row.addControl(new FieldProperty(element), compType);
	}

	/**
	 * add Template to the main container
	 */
	public void addTemplate() {
		Map<String,String> params = FacesContext.getCurrentInstance().getExternalContext().getRequestParameterMap();
		String template = params.get("template-type");
		setTemplate(template);
	}
	
	public String save() {
		formElementService.saveAll(formElements);
		
		return "formview.xhtml?faces-redirect=true&" + "formId=" + form.getId();
	}

	public FieldProperty getSelectedField() {
		return selectedField;
	}

	public void setSelectedField(FieldProperty selectedField) {
		this.selectedField = selectedField;
	}
	
	public String getTemplate() {
		return form.getTemplate();
	}

	public void setTemplate(String template) {
		this.form.setTemplate(template);
	}
	
	public List<UIProperty> getUiProperties(){
		if (clickedControlHasChanged && selectedField != null) {
			Element element = selectedField.getElement();
			
			return this.uiProperties = ComponentUtils.getUIProps(element, element.getType());
		}
		
		return this.uiProperties;
	}
	
	public void dynaControlclick(AjaxBehaviorEvent event) {
		FieldProperty fieldSelected = (FieldProperty) event.getComponent().getAttributes().get("dataSelected");
		setSelectedField(fieldSelected);
		
		this.clickedComponent = event.getComponent();
		this.clickedControlHasChanged = this.clickedComponent != this.oldClickedComponent;

		if(this.clickedControlHasChanged) {
			this.clickedControlHasChanged = true;
			this.oldClickedComponent = this.clickedComponent;
		} else {
			this.clickedControlHasChanged = false;
		}
	}
	
	public String getClickedComponentId() {
		return this.clickedComponent.getClientId(FacesContext.getCurrentInstance());
	}

}
